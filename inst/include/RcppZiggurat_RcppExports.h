// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppZiggurat_RCPPEXPORTS_H_GEN_
#define RCPP_RcppZiggurat_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppZiggurat {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppZiggurat", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppZiggurat", "_RcppZiggurat_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppZiggurat");
            }
        }
    }

    inline Rcpp::NumericVector zrnormMT(int n) {
        typedef SEXP(*Ptr_zrnormMT)(SEXP);
        static Ptr_zrnormMT p_zrnormMT = NULL;
        if (p_zrnormMT == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormMT)(int)");
            p_zrnormMT = (Ptr_zrnormMT)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormMT");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormMT(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline void zsetseedMT(int s) {
        typedef SEXP(*Ptr_zsetseedMT)(SEXP);
        static Ptr_zsetseedMT p_zsetseedMT = NULL;
        if (p_zsetseedMT == NULL) {
            validateSignature("void(*zsetseedMT)(int)");
            p_zsetseedMT = (Ptr_zsetseedMT)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetseedMT");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetseedMT(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline Rcpp::NumericVector zrnormLZLLV(int n) {
        typedef SEXP(*Ptr_zrnormLZLLV)(SEXP);
        static Ptr_zrnormLZLLV p_zrnormLZLLV = NULL;
        if (p_zrnormLZLLV == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormLZLLV)(int)");
            p_zrnormLZLLV = (Ptr_zrnormLZLLV)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormLZLLV");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormLZLLV(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline void zsetseedLZLLV(int s) {
        typedef SEXP(*Ptr_zsetseedLZLLV)(SEXP);
        static Ptr_zsetseedLZLLV p_zsetseedLZLLV = NULL;
        if (p_zsetseedLZLLV == NULL) {
            validateSignature("void(*zsetseedLZLLV)(int)");
            p_zsetseedLZLLV = (Ptr_zsetseedLZLLV)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetseedLZLLV");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetseedLZLLV(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline Rcpp::NumericVector zrnormV1(int n) {
        typedef SEXP(*Ptr_zrnormV1)(SEXP);
        static Ptr_zrnormV1 p_zrnormV1 = NULL;
        if (p_zrnormV1 == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormV1)(int)");
            p_zrnormV1 = (Ptr_zrnormV1)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormV1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormV1(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector zrnormVecV1(Rcpp::NumericVector x) {
        typedef SEXP(*Ptr_zrnormVecV1)(SEXP);
        static Ptr_zrnormVecV1 p_zrnormVecV1 = NULL;
        if (p_zrnormVecV1 == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormVecV1)(Rcpp::NumericVector)");
            p_zrnormVecV1 = (Ptr_zrnormVecV1)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormVecV1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormVecV1(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline std::vector<double> zrnormStlV1(int n) {
        typedef SEXP(*Ptr_zrnormStlV1)(SEXP);
        static Ptr_zrnormStlV1 p_zrnormStlV1 = NULL;
        if (p_zrnormStlV1 == NULL) {
            validateSignature("std::vector<double>(*zrnormStlV1)(int)");
            p_zrnormStlV1 = (Ptr_zrnormStlV1)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormStlV1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormStlV1(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline void zsetseedV1(unsigned long int s) {
        typedef SEXP(*Ptr_zsetseedV1)(SEXP);
        static Ptr_zsetseedV1 p_zsetseedV1 = NULL;
        if (p_zsetseedV1 == NULL) {
            validateSignature("void(*zsetseedV1)(unsigned long int)");
            p_zsetseedV1 = (Ptr_zsetseedV1)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetseedV1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetseedV1(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline unsigned long int zgetseedV1() {
        typedef SEXP(*Ptr_zgetseedV1)();
        static Ptr_zgetseedV1 p_zgetseedV1 = NULL;
        if (p_zgetseedV1 == NULL) {
            validateSignature("unsigned long int(*zgetseedV1)()");
            p_zgetseedV1 = (Ptr_zgetseedV1)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zgetseedV1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zgetseedV1();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<unsigned long int >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector zrnorm(int n) {
        typedef SEXP(*Ptr_zrnorm)(SEXP);
        static Ptr_zrnorm p_zrnorm = NULL;
        if (p_zrnorm == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnorm)(int)");
            p_zrnorm = (Ptr_zrnorm)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnorm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnorm(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector zrnormVec(Rcpp::NumericVector x) {
        typedef SEXP(*Ptr_zrnormVec)(SEXP);
        static Ptr_zrnormVec p_zrnormVec = NULL;
        if (p_zrnormVec == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormVec)(Rcpp::NumericVector)");
            p_zrnormVec = (Ptr_zrnormVec)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormVec");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormVec(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline std::vector<double> zrnormStl(int n) {
        typedef SEXP(*Ptr_zrnormStl)(SEXP);
        static Ptr_zrnormStl p_zrnormStl = NULL;
        if (p_zrnormStl == NULL) {
            validateSignature("std::vector<double>(*zrnormStl)(int)");
            p_zrnormStl = (Ptr_zrnormStl)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormStl");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormStl(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline void zsetseed(unsigned long int s) {
        typedef SEXP(*Ptr_zsetseed)(SEXP);
        static Ptr_zsetseed p_zsetseed = NULL;
        if (p_zsetseed == NULL) {
            validateSignature("void(*zsetseed)(unsigned long int)");
            p_zsetseed = (Ptr_zsetseed)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetseed");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetseed(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline unsigned long int zgetseed() {
        typedef SEXP(*Ptr_zgetseed)();
        static Ptr_zgetseed p_zgetseed = NULL;
        if (p_zgetseed == NULL) {
            validateSignature("unsigned long int(*zgetseed)()");
            p_zgetseed = (Ptr_zgetseed)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zgetseed");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zgetseed();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<unsigned long int >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector zgetpars() {
        typedef SEXP(*Ptr_zgetpars)();
        static Ptr_zgetpars p_zgetpars = NULL;
        if (p_zgetpars == NULL) {
            validateSignature("Rcpp::NumericVector(*zgetpars)()");
            p_zgetpars = (Ptr_zgetpars)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zgetpars");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zgetpars();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline void zsetpars(Rcpp::NumericVector p) {
        typedef SEXP(*Ptr_zsetpars)(SEXP);
        static Ptr_zsetpars p_zsetpars = NULL;
        if (p_zsetpars == NULL) {
            validateSignature("void(*zsetpars)(Rcpp::NumericVector)");
            p_zsetpars = (Ptr_zsetpars)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetpars");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetpars(Shield<SEXP>(Rcpp::wrap(p)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void zsetseedGSL(const uint32_t s) {
        typedef SEXP(*Ptr_zsetseedGSL)(SEXP);
        static Ptr_zsetseedGSL p_zsetseedGSL = NULL;
        if (p_zsetseedGSL == NULL) {
            validateSignature("void(*zsetseedGSL)(const uint32_t)");
            p_zsetseedGSL = (Ptr_zsetseedGSL)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetseedGSL");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetseedGSL(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline Rcpp::NumericVector zrnormGSL(int n) {
        typedef SEXP(*Ptr_zrnormGSL)(SEXP);
        static Ptr_zrnormGSL p_zrnormGSL = NULL;
        if (p_zrnormGSL == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormGSL)(int)");
            p_zrnormGSL = (Ptr_zrnormGSL)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormGSL");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormGSL(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector zrnormV1b(int n) {
        typedef SEXP(*Ptr_zrnormV1b)(SEXP);
        static Ptr_zrnormV1b p_zrnormV1b = NULL;
        if (p_zrnormV1b == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormV1b)(int)");
            p_zrnormV1b = (Ptr_zrnormV1b)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormV1b");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormV1b(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector zrnormQL(int n) {
        typedef SEXP(*Ptr_zrnormQL)(SEXP);
        static Ptr_zrnormQL p_zrnormQL = NULL;
        if (p_zrnormQL == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormQL)(int)");
            p_zrnormQL = (Ptr_zrnormQL)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormQL");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormQL(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline void zsetseedQL(unsigned long int s) {
        typedef SEXP(*Ptr_zsetseedQL)(SEXP);
        static Ptr_zsetseedQL p_zsetseedQL = NULL;
        if (p_zsetseedQL == NULL) {
            validateSignature("void(*zsetseedQL)(unsigned long int)");
            p_zsetseedQL = (Ptr_zsetseedQL)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetseedQL");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetseedQL(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline Rcpp::NumericVector zrnormGl(int n) {
        typedef SEXP(*Ptr_zrnormGl)(SEXP);
        static Ptr_zrnormGl p_zrnormGl = NULL;
        if (p_zrnormGl == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormGl)(int)");
            p_zrnormGl = (Ptr_zrnormGl)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormGl");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormGl(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline void zsetseedGl(unsigned long int s) {
        typedef SEXP(*Ptr_zsetseedGl)(SEXP);
        static Ptr_zsetseedGl p_zsetseedGl = NULL;
        if (p_zsetseedGl == NULL) {
            validateSignature("void(*zsetseedGl)(unsigned long int)");
            p_zsetseedGl = (Ptr_zsetseedGl)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zsetseedGl");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zsetseedGl(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline Rcpp::NumericVector zrnormR(int n) {
        typedef SEXP(*Ptr_zrnormR)(SEXP);
        static Ptr_zrnormR p_zrnormR = NULL;
        if (p_zrnormR == NULL) {
            validateSignature("Rcpp::NumericVector(*zrnormR)(int)");
            p_zrnormR = (Ptr_zrnormR)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_zrnormR");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_zrnormR(Shield<SEXP>(Rcpp::wrap(n)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericMatrix ziggbin(int nbins, double ndraws, const std::string generator = "Ziggurat", const int seed = 42, int edge = 7, int res = 40) {
        typedef SEXP(*Ptr_ziggbin)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_ziggbin p_ziggbin = NULL;
        if (p_ziggbin == NULL) {
            validateSignature("Rcpp::NumericMatrix(*ziggbin)(int,double,const std::string,const int,int,int)");
            p_ziggbin = (Ptr_ziggbin)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_ziggbin");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ziggbin(Shield<SEXP>(Rcpp::wrap(nbins)), Shield<SEXP>(Rcpp::wrap(ndraws)), Shield<SEXP>(Rcpp::wrap(generator)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(edge)), Shield<SEXP>(Rcpp::wrap(res)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericMatrix >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector ziggsum(int nbins, double ndraws, const std::string generator = "Ziggurat", const int seed = 42) {
        typedef SEXP(*Ptr_ziggsum)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_ziggsum p_ziggsum = NULL;
        if (p_ziggsum == NULL) {
            validateSignature("Rcpp::NumericVector(*ziggsum)(int,double,const std::string,const int)");
            p_ziggsum = (Ptr_ziggsum)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_ziggsum");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ziggsum(Shield<SEXP>(Rcpp::wrap(nbins)), Shield<SEXP>(Rcpp::wrap(ndraws)), Shield<SEXP>(Rcpp::wrap(generator)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector ziggtest(int nbins, double ndraws, const std::string generator = "Ziggurat", const int seed = 42) {
        typedef SEXP(*Ptr_ziggtest)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_ziggtest p_ziggtest = NULL;
        if (p_ziggtest == NULL) {
            validateSignature("Rcpp::NumericVector(*ziggtest)(int,double,const std::string,const int)");
            p_ziggtest = (Ptr_ziggtest)R_GetCCallable("RcppZiggurat", "_RcppZiggurat_ziggtest");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ziggtest(Shield<SEXP>(Rcpp::wrap(nbins)), Shield<SEXP>(Rcpp::wrap(ndraws)), Shield<SEXP>(Rcpp::wrap(generator)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

}

#endif // RCPP_RcppZiggurat_RCPPEXPORTS_H_GEN_
